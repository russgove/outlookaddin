import { QueryableConstructor } from "./queryable";
export declare function extractOdataId(candidate: any): string;
export interface ODataParser<T> {
    parse(r: Response): Promise<T>;
}
export declare abstract class ODataParserBase<T> implements ODataParser<T> {
    parse(r: Response): Promise<T>;
    protected handleError(r: Response, reject: (reason?: any) => void): boolean;
    protected parseODataJSON<U>(json: any): U;
}
export declare class ODataDefaultParser extends ODataParserBase<any> {
}
export declare class ODataRawParserImpl implements ODataParser<any> {
    parse(r: Response): Promise<any>;
}
export declare function getEntityUrl(entity: any): string;
export declare let ODataRaw: ODataRawParserImpl;
export declare function ODataValue<T>(): ODataParser<T>;
export declare function ODataEntity<T>(factory: QueryableConstructor<T>): ODataParser<T>;
export declare function ODataEntityArray<T>(factory: QueryableConstructor<T>): ODataParser<T[]>;
/**
 * Manages a batch of OData operations
 */
export declare class ODataBatch {
    private baseUrl;
    private _batchId;
    private _dependencies;
    private _requests;
    constructor(baseUrl: string, _batchId?: string);
    readonly batchId: string;
    /**
     * Adds a request to a batch (not designed for public use)
     *
     * @param url The full url of the request
     * @param method The http method GET, POST, etc
     * @param options Any options to include in the request
     * @param parser The parser that will hadle the results of the request
     */
    add<T>(url: string, method: string, options: any, parser: ODataParser<T>): Promise<T>;
    /**
     * Adds a dependency insuring that some set of actions will occur before a batch is processed.
     * MUST be cleared using the returned resolve delegate to allow batches to run
     */
    addDependency(): () => void;
    /**
     * Execute the current batch and resolve the associated promises
     *
     * @returns A promise which will be resolved once all of the batch's child promises have resolved
     */
    execute(): Promise<any>;
    private executeImpl();
    /**
     * Parses the response from a batch request into an array of Response instances
     *
     * @param body Text body of the response from the batch request
     */
    private _parseResponse(body);
}
export declare class TextFileParser implements ODataParser<string> {
    parse(r: Response): Promise<string>;
}
export declare class BlobFileParser implements ODataParser<Blob> {
    parse(r: Response): Promise<Blob>;
}
export declare class JSONFileParser implements ODataParser<any> {
    parse(r: Response): Promise<any>;
}
export declare class BufferFileParser implements ODataParser<ArrayBuffer> {
    parse(r: any): Promise<ArrayBuffer>;
}
