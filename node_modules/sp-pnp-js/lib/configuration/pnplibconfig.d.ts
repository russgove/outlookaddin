import { TypedHash } from "../collections/collections";
import { HttpClientImpl } from "../net/httpclient";
export interface LibraryConfiguration {
    /**
     * Any headers to apply to all requests
     */
    headers?: TypedHash<string>;
    /**
     * Allows caching to be global disabled, default: false
     */
    globalCacheDisable?: boolean;
    /**
     * Defines the default store used by the usingCaching method, default: session
     */
    defaultCachingStore?: "session" | "local";
    /**
     * Defines the default timeout in seconds used by the usingCaching method, default 30
     */
    defaultCachingTimeoutSeconds?: number;
    /**
     * Defines a factory method used to create fetch clients
     */
    fetchClientFactory?: () => HttpClientImpl;
    /**
     * The base url used for all requests
     */
    baseUrl?: string;
    /**
     * Used to supply the current context from an SPFx webpart to the library
     */
    spfxContext?: any;
}
export declare class RuntimeConfigImpl {
    private _headers;
    private _defaultCachingStore;
    private _defaultCachingTimeoutSeconds;
    private _globalCacheDisable;
    private _fetchClientFactory;
    private _baseUrl;
    private _spfxContext;
    constructor();
    set(config: LibraryConfiguration): void;
    readonly headers: TypedHash<string>;
    readonly defaultCachingStore: "session" | "local";
    readonly defaultCachingTimeoutSeconds: number;
    readonly globalCacheDisable: boolean;
    readonly fetchClientFactory: () => HttpClientImpl;
    readonly baseUrl: string;
}
export declare let RuntimeConfig: RuntimeConfigImpl;
export declare function setRuntimeConfig(config: LibraryConfiguration): void;
