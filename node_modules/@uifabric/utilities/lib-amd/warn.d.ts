export declare type ISettingsMap<T> = {
    [P in keyof T]?: string;
};
/**
 * Warns when a deprecated props are being used.
 *
 * @param componentName - The name of the component being used.
 * @param props - The props passed into the component.
 * @param deprecationMap - The map of deprecations, where key is the prop name and the value is
 * either null or a replacement prop name.
 */
export declare function warnDeprecations<P>(componentName: string, props: P, deprecationMap: ISettingsMap<P>): void;
/**
 * Warns when two props which are mutually exclusive are both being used.
 *
 * @param componentName - The name of the component being used.
 * @param props - The props passed into the component.
 * @param exclusiveMap - A map where the key is a parameter, and the value is the other parameter.
 */
export declare function warnMutuallyExclusive<P>(componentName: string, props: P, exclusiveMap: ISettingsMap<P>): void;
/**
 * Sends a warning to console, if the api is present.
 * @param message - Warning message.
 */
export declare function warn(message: string): void;
/**
 * Configures the warning callback. Passing in undefined will reset it to use the default
 * console.warn function.
 *
 * @param warningCallback - Callback to override the generated warnings.
 */
export declare function setWarningCallback(warningCallback: (message: string) => void): void;
