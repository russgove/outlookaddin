{"version":3,"sources":["string.ts"],"names":[],"mappings":";;AAAA,gFAAgF;AAChF,IAAM,iBAAiB,GAAG,SAAS,CAAC;AAEpC,+EAA+E;AAC/E,IAAM,YAAY,GAAG,UAAU,CAAC;AAEhC;;;;;GAKG;AACH,gBAAuB,CAAS;IAC5B,YAAY,CAAC;IADiB,gBAAgB;SAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;QAAhB,+BAAgB;;IAG9C,IAAI,IAAI,GAAG,MAAM,CAAC;IAClB,0BAA0B;IAC1B,sBAAsB,KAAa;QAC/B,uBAAuB;QACvB,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC,CAAC;QAE7D,+DAA+D;QAC/D,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC;YACpD,WAAW,GAAG,EAAE,CAAC;QACrB,CAAC;QAED,MAAM,CAAC,WAAW,CAAC;IACvB,CAAC;IACD,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC;AACnD,CAAC;AAjBD,wBAiBC","file":"string.js","sourcesContent":["// Regex that finds { and } so they can be removed on a lookup for string format\nconst FORMAT_ARGS_REGEX = /[\\{\\}]/g;\n\n// Regex that finds {#} so it can be replaced by the arguments in string format\nconst FORMAT_REGEX = /\\{\\d+\\}/g;\n\n/**\n * String Format is like C# string format.\n * Usage Example: \"hello {0}!\".format(\"mike\") will return \"hello mike!\"\n * Calling format on a string with less arguments than specified in the format is invalid\n * Example \"I love {0} every {1}\".format(\"CXP\") will result in a Debug Exception.\n */\nexport function format(s: string, ...values: any[]): string {\n    'use strict';\n\n    let args = values;\n    // Callback match function\n    function replace_func(match: string) {\n        // looks up in the args\n        let replacement = args[match.replace(FORMAT_ARGS_REGEX, '')];\n\n        // catches undefined in nondebug and null in debug and nondebug\n        if (replacement === null || replacement === undefined) {\n            replacement = '';\n        }\n\n        return replacement;\n    }\n    return (s.replace(FORMAT_REGEX, replace_func));\n}"],"sourceRoot":"../src"}