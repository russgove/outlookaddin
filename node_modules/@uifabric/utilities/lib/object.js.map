{"version":3,"sources":["object.ts"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,IAAM,mBAAmB,GAAG,eAAe,CAAC;AAI5C,IAAI,OAAO,GAAG,CAAC,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,IAAI,OAAO,CAAC;AAEnE,EAAE,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;IAC/C,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;AACnC,CAAC;AAED,yBAAyB,CAAC,EAAE,CAAC;IAC3B,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC;QACvB,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC/B,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjE,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;QACH,CAAC;IACH,CAAC;IAED,MAAM,CAAC,IAAI,CAAC;AACd,CAAC;AAED,4BAA4B;AAC5B,wBAA+B,CAAC,EAAE,CAAC;IACjC,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACxD,CAAC;AAFD,wCAEC;AAED;;;;;;;;GAQG;AACH,gBAAuB,MAAW;IAAE,cAAO;SAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;QAAP,6BAAO;;IACzC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;AACjE,CAAC;AAFD,wBAEC;AAED;;;;;;;;;;GAUG;AACH,wBAA+B,SAAwC,EAAE,MAAW;IAAE,cAAO;SAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;QAAP,6BAAO;;IAC3F,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;IAEtB,GAAG,CAAC,CAAqB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI;QAAxB,IAAI,YAAY,aAAA;QACnB,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,YAAY,CAAC,CAAC,CAAC;gBAClC,EAAE,CAAC,CAAC,YAAY,CAAC,cAAc,CAAC,QAAQ,CAAC;oBACvC,CAAC,SAAS,IAAI,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACpC,MAAM,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;gBAC5C,CAAC;YACH,CAAC;QACH,CAAC;KACF;IAED,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AAfD,wCAeC;AAED,0GAA0G;AAC1G,eAAsB,MAAe;IACnC,IAAI,KAAK,GAAG,OAAO,CAAC,mBAAmB,CAAC,EAAE,CAAC;IAE3C,MAAM,CAAC,CAAC,MAAM,IAAI,EAAE,CAAC,GAAG,KAAK,CAAC;AAChC,CAAC;AAJD,sBAIC","file":"object.js","sourcesContent":["// Initialize global window id.\nconst CURRENT_ID_PROPERTY = '__currentId__';\n\ndeclare const process: any;\n\nlet _global = (typeof window !== 'undefined' && window) || process;\n\nif (_global[CURRENT_ID_PROPERTY] === undefined) {\n  _global[CURRENT_ID_PROPERTY] = 0;\n}\n\nfunction checkProperties(a, b) {\n  for (let propName in a) {\n    if (a.hasOwnProperty(propName)) {\n      if (!b.hasOwnProperty(propName) || (b[propName] !== a[propName])) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n// Compare a to b and b to a\nexport function shallowCompare(a, b) {\n  return checkProperties(a, b) && checkProperties(b, a);\n}\n\n/**\n * Makes a resulting merge of a bunch of objects. Pass in the target object followed by 1 or more\n * objects as arguments and they will be merged sequentially into the target. Note that this will\n * shallow merge; it will not create new cloned values for target members.\n *\n * @param target - Target object to merge following object arguments into.\n * @param args - One or more objects that will be mixed into the target in the order they are provided.\n * @returns Resulting merged target.\n */\nexport function assign(target: any, ...args): any {\n  return filteredAssign.apply(this, [null, target].concat(args));\n}\n\n/**\n * Makes a resulting merge of a bunch of objects, but allows a filter function to be passed in to filter\n * the resulting merges. This allows for scenarios where you want to merge \"everything except that one thing\"\n * or \"properties that start with data-\". Note that this will shallow merge; it will not create new cloned\n * values for target members.\n *\n * @param isAllowed - Callback to determine if the given propName is allowed in the result.\n * @param target - Target object to merge following object arguments into.\n * @param args - One or more objects that will be mixed into the target in the order they are provided.\n * @returns Resulting merged target.\n */\nexport function filteredAssign(isAllowed: (propName: string) => boolean, target: any, ...args) {\n  target = target || {};\n\n  for (let sourceObject of args) {\n    if (sourceObject) {\n      for (let propName in sourceObject) {\n        if (sourceObject.hasOwnProperty(propName) &&\n          !isAllowed || isAllowed(propName)) {\n          target[propName] = sourceObject[propName];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\n/** Generates a unique id in the global scope (this spans across duplicate copies of the same library.) */\nexport function getId(prefix?: string): string {\n  let index = _global[CURRENT_ID_PROPERTY]++;\n\n  return (prefix || '') + index;\n}\n"],"sourceRoot":"../src"}