{"version":3,"sources":["dom.ts"],"names":[],"mappings":"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","file":"dom.js","sourcesContent":["import { IRectangle } from './IRectangle';\n\n/**\n * Attached interface for elements which support virtual references.\n * Used internally by the virtual hierarchy methods.\n */\ninterface IVirtualElement extends HTMLElement {\n  _virtual: {\n    parent?: IVirtualElement;\n    children: IVirtualElement[];\n  };\n}\n\n/**\n * Sets the virtual parent of an element.\n * Pass `undefined` as the `parent` to clear the virtual parent.\n */\nexport function setVirtualParent(child: HTMLElement, parent: HTMLElement) {\n  let virtualChild = <IVirtualElement>child;\n  let virtualParent = <IVirtualElement>parent;\n\n  if (!virtualChild._virtual) {\n    virtualChild._virtual = {\n      children: []\n    };\n  }\n\n  let oldParent = virtualChild._virtual.parent;\n\n  if (oldParent && oldParent !== parent) {\n    // Remove the child from its old parent.\n    let index = oldParent._virtual.children.indexOf(virtualChild);\n\n    if (index > -1) {\n      oldParent._virtual.children.splice(index, 1);\n    }\n  }\n\n  virtualChild._virtual.parent = virtualParent || undefined;\n\n  if (virtualParent) {\n    if (!virtualParent._virtual) {\n      virtualParent._virtual = {\n        children: []\n      };\n    }\n\n    virtualParent._virtual.children.push(virtualChild);\n  }\n}\n\nexport function getVirtualParent(child: HTMLElement): HTMLElement {\n  let parent: HTMLElement;\n\n  if (child && isVirtualElement(child)) {\n    parent = child._virtual.parent;\n  }\n\n  return parent;\n}\n\n/**\n * Gets the element which is the parent of a given element.\n * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over\n * real DOM parent when present.\n */\nexport function getParent(child: HTMLElement, allowVirtualParents: boolean = true): HTMLElement {\n  return child && (\n    allowVirtualParents && getVirtualParent(child) ||\n    child.parentNode && child.parentNode as HTMLElement\n  );\n}\n\n/**\n * Determines whether or not a parent element contains a given child element.\n * If `allowVirtualParents` is true, this method may return `true` if the child\n * has the parent in its virtual element hierarchy.\n */\nexport function elementContains(parent: HTMLElement, child: HTMLElement, allowVirtualParents: boolean = true): boolean {\n  let isContained = false;\n\n  if (parent && child) {\n    if (allowVirtualParents) {\n      isContained = false;\n\n      while (child) {\n        let nextParent = getParent(child);\n\n        if (nextParent === parent) {\n          isContained = true;\n          break;\n        }\n\n        child = nextParent;\n      }\n    } else if (parent.contains) {\n      isContained = parent.contains(child);\n    }\n  }\n\n  return isContained;\n}\n\nlet _isSSR = false;\n\n/**\n * Helper to set ssr mode to simulate no window object returned from getWindow helper.\n */\nexport function setSSR(isEnabled) {\n  _isSSR = isEnabled;\n}\n\n/** Helper to get the window object. */\nexport function getWindow(rootElement?: HTMLElement) {\n  if (_isSSR) {\n    return undefined;\n  } else {\n    return (\n      rootElement &&\n        rootElement.ownerDocument &&\n        rootElement.ownerDocument.defaultView ?\n        rootElement.ownerDocument.defaultView :\n        window\n    );\n  }\n}\n\n/**\n * Helper to get the document object.\n */\nexport function getDocument(rootElement?: HTMLElement) {\n  if (_isSSR) {\n    return undefined;\n  } else {\n    return rootElement && rootElement.ownerDocument ? rootElement.ownerDocument : document;\n  }\n}\n\n/**\n * Helper to get bounding client rect, works with window.\n */\nexport function getRect(element: HTMLElement | Window): IRectangle {\n  let rect: IRectangle;\n\n  if (element) {\n    if (element === window) {\n      rect = {\n        left: 0,\n        top: 0,\n        width: window.innerWidth,\n        height: window.innerHeight,\n        right: window.innerWidth,\n        bottom: window.innerHeight\n      };\n    } else if ((element as HTMLElement).getBoundingClientRect) {\n      rect = (element as HTMLElement).getBoundingClientRect();\n    }\n  }\n\n  return rect;\n}\n\n/**\n * Determines whether or not an element has the virtual hierarchy extension.\n */\nfunction isVirtualElement(element: HTMLElement | IVirtualElement): element is IVirtualElement {\n  return element && !!(<IVirtualElement>element)._virtual;\n}"],"sourceRoot":"../src"}