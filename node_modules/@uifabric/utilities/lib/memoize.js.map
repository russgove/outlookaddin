{"version":3,"sources":["memoize.ts"],"names":[],"mappings":";;AAMA,IAAM,YAAY,GAAG,EAAE,CAAC;AACxB,IAAM,WAAW,GAAG,EAAE,CAAC;AAEvB,uBAAuB,GAAQ;IAC7B,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACT,MAAM,CAAC,YAAY,CAAC;IACtB,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7B,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;IACxB,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;AAC1B,CAAC;AAED,iBAA0E,EAAK;IAC7E,IAAI,KAAU,CAAC;IAEf,kDAAkD;IAClD,MAAM,CAAC;QAA0B,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QAC7C,IAAI,MAAgB,CAAC;QAErB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;gBACxB,KAAK,GAAG,EAAE,eAAI,IAAI,CAAC,CAAC;YACtB,CAAC;YACD,MAAM,GAAG,KAAK,CAAC;QACjB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,KAAK,GAAG,IAAI,OAAO,EAAE,CAAC;YACxB,CAAC;YAED,IAAI,YAAY,GAAQ,KAAK,CAAC;YAE9B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBACzC,IAAI,GAAG,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEjC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACT,GAAG,GAAG,YAAY,CAAC;gBACrB,CAAC;gBACD,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACnB,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAChC,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,YAAY,GAAG,IAAI,OAAO,EAAE,CAAC;oBAC7B,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;gBAC/B,CAAC;YACH,CAAC;YAED,IAAI,OAAO,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAEnD,EAAE,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAC9B,MAAM,GAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACrC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,KAAK,GAAG,EAAE,eAAI,IAAI,CAAC,CAAC;gBACxB,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBACjC,MAAM,GAAG,KAAK,CAAC;YACjB,CAAC;QACH,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAChB,CAAQ,CAAC;AACX,CAAC;AA9CD,0BA8CC","file":"memoize.js","sourcesContent":["declare class WeakMap {\r\n  public get(key: any): any;\r\n  public set(key: any, value: any): void;\r\n  public has(key: any);\r\n}\r\n\r\nconst _emptyObject = {};\r\nconst _dictionary = {};\r\n\r\nfunction _normalizeArg(val: any) {\r\n  if (!val) {\r\n    return _emptyObject;\r\n  } else if (typeof val === 'object') {\r\n    return val;\r\n  } else if (!_dictionary[val]) {\r\n    _dictionary[val] = {};\r\n  }\r\n\r\n  return _dictionary[val];\r\n}\r\n\r\nexport function memoize<T extends (...args: any[]) => RET_TYPE, RET_TYPE>(cb: T): T {\r\n  let cache: any;\r\n\r\n  // tslint:disable-next-line:no-function-expression\r\n  return function memoizedFunction(...args: any[]): RET_TYPE {\r\n    let retVal: RET_TYPE;\r\n\r\n    if (args.length === 0) {\r\n      if (cache === undefined) {\r\n        cache = cb(...args);\r\n      }\r\n      retVal = cache;\r\n    } else {\r\n      if (!cache) {\r\n        cache = new WeakMap();\r\n      }\r\n\r\n      let currentCache: any = cache;\r\n\r\n      for (let i = 0; i < args.length - 1; i++) {\r\n        let arg = _normalizeArg(args[i]);\r\n\r\n        if (!arg) {\r\n          arg = _emptyObject;\r\n        }\r\n        if (cache.has(arg)) {\r\n          currentCache = cache.get(arg);\r\n        } else {\r\n          currentCache = new WeakMap();\r\n          cache.set(arg, currentCache);\r\n        }\r\n      }\r\n\r\n      let lastArg = _normalizeArg(args[args.length - 1]);\r\n\r\n      if (currentCache.has(lastArg)) {\r\n        retVal = currentCache.get(lastArg);\r\n      } else {\r\n        let value = cb(...args);\r\n        currentCache.set(lastArg, value);\r\n        retVal = value;\r\n      }\r\n    }\r\n\r\n    return retVal;\r\n  } as any;\r\n}\r\n"],"sourceRoot":"..\\src"}